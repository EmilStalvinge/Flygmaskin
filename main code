#define F_CPU 8000000UL
#include <stdint.h>
#include <avr/io.h>
#include <util/delay.h>
#include <stdlib.h>
#include <avr/interrupt.h>
#include <stdio.h>
#include <avr/pgmspace.h>
#include <util/atomic.h>
#include <math.h>
#include "i2cmaster.h"
//#include "lcd.h"


// hardware I2C address
#define MPU6050_ADDR  (0x68 << 1)
	
#define BAUD_RATE_9600_BPS  51  // 9600bps
#define BAUD_RATE_100000_BPS  4  // 100_thbps
#define RX_BUFFER_SIZE    25

// definition of the DS1307 hardware registers - eight 8-bit registers
enum { gxh, gxl, gyh, gyl, gzh, gzl, DSREGS};
	
// +-----------------------------------------------------------------------+ //

int16_t rxReadPos = 0;
int16_t rxWritePos = 0;
char _payload[RX_BUFFER_SIZE];
int16_t channels[5];
int16_t Buffer_loaded = 0;
int16_t failsafe = 0;
int16_t Motorcount = 1;
int16_t timer = 10;

int16_t pwm_R_F, pwm_R_B, pwm_L_F, pwm_L_B;

/////////////////PID variabler////////////////////
int16_t input_THROTTLE =0;
int16_t yaw_desired_anglevelocity=0;
int16_t roll_desired_anglevelocity=0;
int16_t pitch_desired_anglevelocity=0;
int16_t roll_error =0;
int16_t pitch_error=0, roll_pid_p=0, pitch_pid_p=0, roll_pid_d=0, pitch_pid_d=0,roll_PID=0,pitch_PID=0, yaw_error=0, yaw_pid_p=0, yaw_PID=0, yaw_pid_i=0;
int16_t roll_anglevelocity=0, pitch_anglevelocity=0,yaw_anglevelocity=0, pwm_R_F=0, pwm_R_B=0, pwm_L_F=0, pwm_L_B=0;
int16_t roll_pid_i = 0;
int16_t pitch_pid_i = 0;
int16_t roll_previous_error = 0;
int16_t pitch_previous_error = 0;
int16_t elapsedTime=0;
//////////////////////////////////////////////////


// memory copy of the MPU6050 registers
int16_t DS1307_regs[DSREGS];

// read the gyro registers from the MPU6050 into the memory
void MPUread(void)
{
	int16_t i;
	// ATOMIC BLOCK?????
		// set stop condition = release bus
		/* Commence the read. */
		i2c_start_wait(MPU6050_ADDR+I2C_WRITE);   // est device address and write mode
		i2c_write(0x43);                          //
		
		/* Commence the read. */
		_delay_us(20);
		i2c_start_wait(MPU6050_ADDR+I2C_READ);
		for (i=0; i<(DSREGS-1); i++)
		{
			_delay_us(10);
			DS1307_regs[i] = i2c_read(1);
		}
		_delay_us(10);
		DS1307_regs[DSREGS-1] = i2c_read(0);
		i2c_stop();
	
}

// Set Low Pass filter for MPU6050
void DLPFwrite(void)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		i2c_start_wait(MPU6050_ADDR+I2C_WRITE);
		i2c_write(0x1A);  //start address
		
		i2c_write(0b00000100);
		
		i2c_stop();
	}
}

//wake up MPU
void initI2C(void)
{
	i2c_init();
	// power management 0x6B, wake up from sleep
	
	i2c_start_wait(MPU6050_ADDR+I2C_WRITE);
	_delay_us(20);
	i2c_write(0x6B);
	_delay_us(20);
	i2c_write(0x00);
	_delay_us(20);
	i2c_stop();
}

//counting time for Derivative part of PID
void initTime(void)
{
	TCCR0B=(1 << CS00 );
	TIMSK0=(1 << TOIE0);
}

// init 16bit timer for motor pwm
void initMotor(void)
{
	DDRD = 0b11110000;              //PORT D used as AND gates to multiplex pwm to all motors
	DDRB |= (1 << PB1)|(1 << PB0);
	
	
	
	TCCR1A |= (1 << COM1A1) | (0 << WGM10) | (1 << WGM11);
	// set non-inverting mode

	TCCR1B |= (1 << WGM12) | (1 << WGM13) | (1 << CS10);
	// set fast PWM Mode
	
	TIMSK1 = (1 << OCIE1B);
	
	 ICR1 = 8000000UL/4000;      // frequency F_cpu/wanted freq = ICR1
	 OCR1A = 1000;               // set duty cycle, 1000-2000, 0-100%
	 OCR1B= 8000000UL/4000 -100; // Prepare to switch AND gates in interrupt
}

void initSBUS(void)
{
	unsigned int ubrr = BAUD_RATE_100000_BPS;

	/* Set Baudrate  */
	UBRR0H = (ubrr>>8); // Shift the 16bit value ubrr 8 times to the right and transfer the upper 8 bits to UBBR0H register.
	UBRR0L = (ubrr);    // Copy the 16 bit value ubrr to the 8 bit UBBR0L register,Upper 8 bits are truncated while lower 8 bits are copied

	
	// init reciever
	UCSR0C = 0b00101110;       /* Set frame format: 8data, 2stop bit, even parity */
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1<<TXEN0) ;   /* Enable  rx, tx  , enable interrupts         */
}

/*
void initLCD(void)
{
	//init LCD
	lcd_init(LCD_DISP_ON);
	lcd_clrscr();
	lcd_gotoxy(1,0);
	lcd_puts_P("MPU6050 TEST");
	_delay_ms(1000);
	lcd_clrscr();
}
*/

int main()
{
	sei();   //Enable interrupts
	
	int16_t gx,gy,gz;

	
	////////////////INITIALIZATION ///////////////////
	initSBUS();
	initMotor();
	//initLCD();
	initI2C();
	DLPFwrite();
	initTime();
	//////////////////////////////////////////////////
	
	////////////////PID konstanter////////////////////
	
	int16_t roll_kp  = 1;
   	int16_t pitch_kp = 1;
	int16_t yaw_kp   = 1;   
	int16_t roll_ki  = 0;
   	int16_t pitch_ki = 0;
	int16_t yaw_ki   = 0;   
	int16_t roll_kd  = 1;
   	int16_t pitch_kd = 1;
	
	//////////////////////////////////////////////////
	
	while(1)
	{
		
		
		MPUread();  //Fetch gyro values from MPU6050
	
		//gyro
		gx  = ( (DS1307_regs[gxh] << 8) | DS1307_regs[gxl] ) / 131;    //x-axis Angle velocity   degrees/s
		gy  = ( (DS1307_regs[gyh] << 8) | DS1307_regs[gyl] ) / 131;    //y-axis Angle velocity   degrees/s
		gz  = ( (DS1307_regs[gzh] << 8) | DS1307_regs[gzl] ) / 131;    //z-axis Angle velocity   degrees/s
		
		
		if (Buffer_loaded == 1)   // wait for whole SBUS package
		{        // 1 channel is 11 bits, save the 11 bit value in a 16 bit memory
			channels[0]  = (int16_t) ((_payload[1]    |_payload[2] <<8)                     & 0x07FF); // pitch    (högre värde uppåt)      mitten 1001
			channels[1]  = (int16_t) ((_payload[2]>>3 |_payload[3] <<5)                     & 0x07FF); // roll     (högre värde till höger) 170-1815
			channels[2]  = (int16_t) ((_payload[3]>>6 |_payload[4] <<2 |_payload[5]<<10)  	& 0x07FF); // throttle (högre värde uppåt)      mitt 986
			channels[3]  = (int16_t) ((_payload[5]>>1 |_payload[6] <<7)                     & 0x07FF); // yaw      (högre värde höger)      mitt 989
			channels[4]  = (int16_t) ((_payload[6]>>4 |_payload[7] <<4)                     & 0x07FF); // switch   (högre uppåt)
			if ( (_payload[24] & 0x10) == 0x10)
			{
				failsafe = 1;
			}
			Buffer_loaded = 0;  
		}
		
		
	  
	  
		/*///////////////////////////P I D  L O O P///////////////////////////////////*/
      
	  
	  roll_anglevelocity  = gy*-1;   // measured angle velocity y-axis
	  pitch_anglevelocity = gx;      // measured angle velocity x-axis
	  yaw_anglevelocity   = gz;      // measured angle velocity z-axis
	  
	
		 
      input_THROTTLE              = ((2* channels[2])/3 ) +866;  // mapping 0-2000 from joystick to OCR1B value of 1000-2000
	  yaw_desired_anglevelocity   = ((3* channels[3])/25) -114;  // mapping 0-2000 from joystick to a desired yaw angle velocity of -90 to 90
      roll_desired_anglevelocity  = ((3* channels[1])/25) -120;  // mapping 0-2000 from joystick to a desired roll angle velocity of -90 to 90
      pitch_desired_anglevelocity = ((3* channels[0])/25) -114;  // mapping 0-2000 from joystick to a desired pitch angle velocity of -90 to 90
	  
	  //if ((1020>channels[0]) | (980<channels[0])){pitch_desired_anglevelocity=0;}
	  //if ((1020>channels[1]) | (980<channels[1])){roll_desired_anglevelocity =0;}
      //if ((1020>channels[2]) | (980<channels[2])){yaw_desired_anglevelocity  =0;}
	        
      roll_error  = roll_desired_anglevelocity  - roll_anglevelocity;
      pitch_error = pitch_desired_anglevelocity - pitch_anglevelocity;    
      yaw_error   = yaw_desired_anglevelocity   - yaw_anglevelocity;   
	
      roll_pid_p  = 0.3  * roll_error;
      pitch_pid_p = 0.3 * pitch_error;
	  yaw_pid_p   = 0.3   * yaw_error;
    
      //if((-3 < roll_error)  & (roll_error  < 3)) {roll_pid_i  = roll_pid_i  + (roll_ki  * roll_error );}
      //if((-3 < pitch_error) & (pitch_error < 3)) {pitch_pid_i = pitch_pid_i + (pitch_ki * pitch_error);}
	  //if((-3 < yaw_error)   & (yaw_error   < 3)) {yaw_pid_i   = yaw_pid_i   + (yaw_ki   * yaw_error  );}
			  
      elapsedTime = (timer*32) / 1000000;  //elapsed time in seconds
	  timer = 0;
	  
      roll_pid_d  = 0.4  *((roll_error  - roll_previous_error )/elapsedTime);		
      pitch_pid_d = 0.4 *((pitch_error - pitch_previous_error)/elapsedTime);
    
      roll_PID  = roll_pid_p  + roll_pid_i  + roll_pid_d;
      pitch_PID = pitch_pid_p + pitch_pid_i + pitch_pid_d;
	  yaw_PID   = yaw_pid_p   + yaw_pid_i;
    
      //if(roll_PID  < -400) {roll_PID  = -400;}
      //if(roll_PID  >  400) {roll_PID  =  400;}
      //if(pitch_PID < -400) {pitch_PID = -400;}
      //if(pitch_PID >  400) {pitch_PID =  400;}
      //if(yaw_PID   < -400) {yaw_PID   = -400;}
      //if(yaw_PID   >  400) {yaw_PID   =  400;}
	
	// Setting motor values
      pwm_R_F  = input_THROTTLE - roll_PID - pitch_PID + yaw_PID;
      pwm_R_B  = input_THROTTLE - roll_PID + pitch_PID - yaw_PID;
      pwm_L_B  = input_THROTTLE + roll_PID + pitch_PID + yaw_PID;
      pwm_L_F  = input_THROTTLE + roll_PID - pitch_PID - yaw_PID;
	
	//limiting max motor input
	if(pwm_R_F > 2000) {pwm_R_F = 2000;}
	if(pwm_R_B > 2000) {pwm_R_B = 2000;}
	if(pwm_L_F > 2000) {pwm_L_F = 2000;}
	if(pwm_L_B > 2000) {pwm_L_B = 2000;}
    
	//Setting lowest motor input to 1000 AND checking if "Enable" switch is on
	if((pwm_R_F < 1000) | (channels[4]<1500)) {pwm_R_F = 990;}
	if((pwm_R_B < 1000) | (channels[4]<1500)) {pwm_R_B = 990;}
	if((pwm_L_F < 1000) | (channels[4]<1500)) {pwm_L_F = 900;}
	if((pwm_L_B < 1000) | (channels[4]<1500)) {pwm_L_B = 900;}
	
	// saving error for derivative part of PID//
	  roll_previous_error  = roll_error;
	  pitch_previous_error = pitch_error;
   //////////////////////////////////////////////////////////////////////////////////////////////////////////
		
	
		
	}
}//end of main

ISR(TIMER1_COMPB_vect)
{
switch (Motorcount)
{
case 1: 
OCR1A = pwm_L_F;			//LF
      PORTD=0b00010000;                                //byt motor
	break;
	
case 2:
 OCR1A = pwm_L_B;			//LB
      PORTD=0b00100000;                                 //byt motor
   break;
   
case 3:
   
     PORTD=0b00000000;                                  //
   break;
   
case 4:
  OCR1A = pwm_R_B;			//RB
      PORTD=0b10000000;                                 //byt motor
   break;
   
   case 5:
   OCR1A = pwm_R_F;			//RF		
   PORTD=0b01000000;                                    //byt motor
   break;
   
   
   default:
   OCR1A=1000;
   PORTD=0x00;
   if(Motorcount==8)
   {
	   Motorcount=0;
   }  
} //end of switch
Motorcount++;
}


ISR(TIMER0_OVF_vect)
{
	timer++;
}


ISR(USART_RX_vect)
{
	
	_payload[rxWritePos] = UDR0;
	
	if (_payload[0] == 0x0F)              //leta efter header
	{
		rxWritePos++;

		if (rxWritePos >= RX_BUFFER_SIZE)
		{
			rxWritePos = 0;
			Buffer_loaded = 1;           // Flagga när buffern är lastad
		}
	}
}
