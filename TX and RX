#define F_CPU 8000000UL
#include <stdint.h>
#include <avr/io.h>
#include <util/delay.h>
#include <stdlib.h>
#include "lcd.h"
#include <avr/interrupt.h>
//#include "i2cmaster.h"




#define BAUD_RATE_9600_BPS  51  // 9600bps
#define BAUD_RATE_100000_BPS  4  // 100kbps
#define RX_BUFFER_SIZE    25



// +-----------------------------------------------------------------------+ //

char serialBuffer[RX_BUFFER_SIZE];

uint8_t rxReadPos = 0;

uint8_t rxWritePos = 0;

char rxBUFFER[RX_BUFFER_SIZE];

uint16_t kanal[5];

uint8_t Buffer_loaded = 0;  

char getChar(void);





int main()
{
	DDRB= 0x01;

	sei();

	unsigned int ubrr = BAUD_RATE_100000_BPS;

	//unsigned char data[] = "fest_i_kväll_grabbar";


	/* Set Baudrate  */

	UBRR0H = (ubrr>>8); // Shift the 16bit value ubrr 8 times to the right and transfer the upper 8 bits to UBBR0H register.

	UBRR0L = (ubrr);    // Copy the 16 bit value ubrr to the 8 bit UBBR0L register,Upper 8 bits are truncated while lower 8 bits are copied

	

	

	// init reciever

	UCSR0C = 0b00101110;       /* Set frame format: 8data, 2stop bit, even parity */

	UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1<<TXEN0) ;   /* Enable  rx, tx  , enable interrupts         */

    char buffer[20];
    uint8_t ind;
	
	while(1)
	{
		
		
		kanal[0] = (rxBUFFER[1] << 3 | rxBUFFER[2] << 5) & 0x07FF;                 //  Pitch
		kanal[1] = (rxBUFFER[2] << 6 | rxBUFFER[3] << 2) & 0x07FF;                 //  Roll
        kanal[2] = (rxBUFFER[3] << 9 | rxBUFFER[4] << 1 | rxBUFFER[5]) & 0x07FF ;  //throttle osäker
		kanal[3] = (rxBUFFER[5] << 4 | rxBUFFER[6] << 4)  & 0x07FF;                // yaw   osäker
		kanal[4] = (rxBUFFER[6] << 7 | rxBUFFER[7] << 1)  &  0x07FF;               // yaw??????
		
	//	utoa(kanal[0],buffer,10);
	//	ind=0;
	//	while(buffer[ind]!=0)
	//	{
		//	UDR0 = buffer[ind];
		
		//	ind++;
	//	}

if (kanal[4] > 1800)
{
	PORTB = 0b00000001 ;
	
}
	else
	{
	PORTB = 0x00;	
	}


		 //UDR0 = kanal[0];
		// UDR0 = '8'; 
		// UDR0 = kanal[3];
		 
		 
   }
}//end of main



//char peekChar(void)



char getChar(void)
{
	char ret = '\0';
	
	if(rxReadPos != rxWritePos)
	{
		ret = rxBUFFER[rxReadPos];
		rxReadPos++;

		if(rxReadPos >= RX_BUFFER_SIZE)
		{
			rxReadPos = 0;
		}
	}
	return ret;
}



ISR(USART_RX_vect)
{
	rxBUFFER[rxWritePos] = UDR0;
	
	if (rxBUFFER[0] == 0x0F)              //leta efter header
	{
		rxWritePos++;

		if (rxWritePos >= RX_BUFFER_SIZE)
		{
			rxWritePos = 0;	
			Buffer_loaded = 1;           // Flagga när buffern är lastad
		}
	}
}
