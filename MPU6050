/*
 * 20161129_m328_tinyrtc.c
 *
 * Created: 2016-11-29 10:19:21
 * Author : uwezi
 */ 
#define F_CPU 8000000UL
#include <avr/io.h>
#include <stdio.h>
#include <avr/pgmspace.h>
#include <util/delay.h>
#include <util/atomic.h>
#include "i2cmaster.h"
#include "lcd.h"

/* Unsigned 8-bit BCD operations. */
// in BCD each half of an 8-bit unsigned integer represents one digit from 0-9
// similar to hexadecimal coding, but the higher bit combinations 1010 to 1111 
// are not used

// #define fromBCD(x) (((x) >> 4) * 10 + ((x) & 0xF))
// #define toBCD(x)   ((((x) / 10) << 4) | ((x) % 10))



// hardware I2C address
#define MPU6050_ADDR  (0x68 << 1)   

// definition of the DS1307 hardware registers - eight 8-bit registers
enum {axh, axl, ayh, ayl, azh, azl, th, tl, gxh, gxl, gyh, gyl, gzh, gzl, DSREGS};

// memory copy of the DS1307 registers
uint8_t DS1307_regs[DSREGS];


// read the eight registers from the DS1307 into the memory
void DS1307read(void)
{
  uint8_t i;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  {
                             // set stop condition = release bus
    /* Commence the read. */
    i2c_start_wait(MPU6050_ADDR+I2C_WRITE);   // est device address and write mode
    i2c_write(0x3B);                         // wake up sensor
                            
    /* Commence the read. */
    _delay_us(20);
    i2c_start_wait(MPU6050_ADDR+I2C_READ);
    for (i=0; i<(DSREGS-1); i++)
    {
      _delay_us(10);
      DS1307_regs[i] = i2c_read(1);
    }
    _delay_us(10);
    DS1307_regs[DSREGS-1] = i2c_read(0);
    i2c_stop();
  }
}

// write the contents of the memory into the eight hardware registers of the DS1307
void DLPFwrite(void)
{
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  {
    i2c_start_wait(MPU6050_ADDR+I2C_WRITE);
    i2c_write(0x1A);  //start address
    
      i2c_write(0b00000100);
    
    i2c_stop();
  }
}

void init()
{
  
  //init LCD
  lcd_init(LCD_DISP_ON);
  lcd_clrscr();
  lcd_gotoxy(1,0);
  lcd_puts_P("MPU6050 Test");
  _delay_ms(1000);
lcd_clrscr();
  i2c_init();
  
  // init  MPU-6050
      i2c_start_wait(MPU6050_ADDR+I2C_WRITE);   // set device address and write mode
    _delay_us(20);
      i2c_write(0x6b);                          // exit sleep mode
    _delay_us(20);
      i2c_write(0x00);                         
      i2c_stop();
	  
  DLPFwrite();                                  // set low pass filter
  
}


int main(void)
{
  float ax,ay,az,gx,gy,gz,temp;
  char buffer[20];
  init();
  
  while (1) 
  {
    DS1307read();

      // accelerometer
      ax  = ( (DS1307_regs[axh] << 8) | DS1307_regs[axl] ) / 8192;
	  ay  = ( (DS1307_regs[ayh] << 8) | DS1307_regs[ayl] ) / 8192; 
	  az  = ( (DS1307_regs[azh] << 8) | DS1307_regs[azl] ) / 8192;
	  
	  //gyro
      gx  = ( (DS1307_regs[gxh] << 8) | DS1307_regs[gxl] ) / 131;
	  gy  = ( (DS1307_regs[gyh] << 8) | DS1307_regs[gyl] ) / 131;
	  gz  = ( (DS1307_regs[gzh] << 8) | DS1307_regs[gzl] ) / 131;
	  
     // temp= (((DS1307_regs[th]  << 8) + DS1307_regs[tl])/340)+36.53 ;
	  
    sprintf(buffer, "x %02f ",gx);	
    lcd_gotoxy(0,1);
	lcd_puts(buffer);	
    sprintf(buffer, "y %02e ",gy);
    lcd_gotoxy(8,0);
    lcd_puts(buffer);
	sprintf(buffer, "z %g ",gz);
	lcd_gotoxy(0,0);
	lcd_puts(buffer);
	
    
    _delay_ms(300);
	lcd_clrscr();
	
	
  }
}
